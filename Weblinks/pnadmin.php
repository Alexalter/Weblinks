<?php
/**
 * Zikula Application Framework
 *
 * Weblinks
 *
 * @version $Id$
 * @copyright 2010 by Petzi-Juist
 * @link http://www.petzi-juist.de
 * @license GNU/GPL - http://www.gnu.org/copyleft/gpl.html
 */

/**
 * function main
 */
function Weblinks_admin_main() // ready
{
    return Weblinks_admin_view();
}

/**
 * function view
 */
function Weblinks_admin_view() // ready
{
    // Security check
    if (!SecurityUtil::checkPermission('Weblinks::', "::", ACCESS_EDIT)) {
        return LogUtil::registerPermissionError();
    }

    // create output object
    $render = pnRender::getInstance('Weblinks', false);

    // assign various useful template variables
    $render->assign('authid', SecurityUtil::generateAuthKey('Weblinks'));
    $render->assign('numrows', pnModAPIFunc('Weblinks', 'user', 'numrows'));
    $render->assign('catnum', pnModAPIFunc('Weblinks', 'user', 'catnum'));
    $render->assign('totalbrokenlinks', pnModAPIFunc('Weblinks', 'admin', 'countbrokenlinks'));
    $render->assign('totalmodrequests', pnModAPIFunc('Weblinks', 'admin', 'countmodrequests'));
    $render->assign('newlinks', pnModAPIFunc('Weblinks', 'admin', 'newlinks'));

    // Return the output that has been generated by this function
    return $render->fetch('weblinks_admin_view.html');
}

/**
 * function catview
 */
function Weblinks_admin_catview() // ready
{
    // Security check
    if (!SecurityUtil::checkPermission('Weblinks::Category', "::", ACCESS_EDIT)) {
        return LogUtil::registerPermissionError();
    }

    // create output object
    $render = pnRender::getInstance('Weblinks', false);

    // assign various useful template variables
    $render->assign('authid', SecurityUtil::generateAuthKey('Weblinks'));
    $render->assign('catnum', pnModAPIFunc('Weblinks', 'user', 'catnum'));

    // Return the output that has been generated by this function
    return $render->fetch('weblinks_admin_catview.html');
}

/**
 * function addcategory
 */
function Weblinks_admin_addcategory() // ready
{
    $dom = ZLanguage::getModuleDomain('Weblinks');

    // get parameters we need
    $pid = (int)FormUtil::getPassedValue('pid', null, 'POST');
    $title = FormUtil::getPassedValue('title', null, 'POST');
    $cdescription = FormUtil::getPassedValue('cdescription', null, 'POST');

    // Security check
    if (!SecurityUtil::checkPermission('Weblinks::Category', "::", ACCESS_ADD)) {
        return LogUtil::registerPermissionError();
    }

    // Confirm authorisation code.
    if (!SecurityUtil::confirmAuthKey()) {
        return LogUtil::registerAuthidError();
    }

    // check and add a new category
    if (pnModAPIFunc('Weblinks', 'admin', 'addcategory', array('pid' => $pid,
                                                                'title' => $title,
                                                                'cdescription' => $cdescription))) {
        // Success
        LogUtil::registerStatus(__('Category successfully added', $dom));
    }

    // redirect to function catview
    return pnRedirect(pnModURL('Weblinks', 'admin', 'catview'));
}

/**
 * function modcategory
 */
function Weblinks_admin_modcategory() // ready
{
    // get parameters we need
    $cid = (int)FormUtil::getPassedValue('cid', null, 'POST');

    // Security check
    if (!SecurityUtil::checkPermission('Weblinks::Category', "::", ACCESS_EDIT)) {
        return LogUtil::registerPermissionError();
    }

    // Confirm authorisation code.
    if (!SecurityUtil::confirmAuthKey()) {
        return LogUtil::registerAuthidError();
    }

    // create output object
    $render = pnRender::getInstance('Weblinks', false);

    // assign various useful template variables
    $render->assign('authid', SecurityUtil::generateAuthKey('Weblinks'));
    $render->assign('category', pnModAPIFunc('Weblinks', 'admin', 'getcategory', array('cid' => $cid)));

    // Return the output that has been generated by this function
    return $render->fetch('weblinks_admin_modcategory.html');
}

/**
 * function savemodcategory
 */
function Weblinks_admin_savemodcategory() // ready
{
    $dom = ZLanguage::getModuleDomain('Weblinks');

    // get parameters we need
    $cid = (int)FormUtil::getPassedValue('cid', null, 'POST');
    $title = FormUtil::getPassedValue('title', null, 'POST');
    $pid = (int)FormUtil::getPassedValue('pid', null, 'POST');
    $cdescription = FormUtil::getPassedValue('cdescription', null, 'POST');

    // Security check
    if (!SecurityUtil::checkPermission('Weblinks::Category', "::", ACCESS_EDIT)) {
        return LogUtil::registerPermissionError();
    }

    // Confirm authorisation code.
    if (!SecurityUtil::confirmAuthKey()) {
        return LogUtil::registerAuthidError();
    }

    // update the category with new vars
    if (pnModAPIFunc('Weblinks', 'admin', 'updatecategory', array('cid' => $cid,
                                                                  'title' => $title,
                                                                  'pid' => $pid,
                                                                  'cdescription' => $cdescription))) {

        // Success
        LogUtil::registerStatus(__('Category successfully modified', $dom));
    }

    // redirect to function catview
    return pnRedirect(pnModURL('Weblinks', 'admin', 'catview'));
}

/**
 * function suredelcategory
 */
function Weblinks_admin_suredelcategory() // ready
{
    // get parameters we need
    $cid = (int)FormUtil::getPassedValue('cid', null, 'POST');

    // Security check
    if (!SecurityUtil::checkPermission('Weblinks::Category', "::", ACCESS_DELETE)) {
        return LogUtil::registerPermissionError();
    }

    // Confirm authorisation code.
    if (!SecurityUtil::confirmAuthKey()) {
        return LogUtil::registerAuthidError();
    }

    // create output object
    $render = pnRender::getInstance('Weblinks', false);

    // assign various useful template variables
    $render->assign('authid', SecurityUtil::generateAuthKey('Weblinks'));
    $render->assign('cid', $cid);

    // Return the output that has been generated by this function
    return $render->fetch('weblinks_admin_suredelcategory.html');
}

/**
 * function delcategory
 */
function Weblinks_admin_delcategory() // ready
{
    $dom = ZLanguage::getModuleDomain('Weblinks');

    // get parameters we need
    $cid = (int)FormUtil::getPassedValue('cid', null, 'POST');

    // Security check
    if (!SecurityUtil::checkPermission('Weblinks::Category', "::", ACCESS_DELETE)) {
        return LogUtil::registerPermissionError();
    }

    // Confirm authorisation code.
    if (!SecurityUtil::confirmAuthKey()) {
        return LogUtil::registerAuthidError();
    }

    // delete the category
    if (pnModAPIFunc('Weblinks', 'admin', 'delcategory', array('cid' => $cid))) {
        // Success
        LogUtil::registerStatus(__('Category successfully deleted', $dom));
    }

    // redirect to function catview
    return pnRedirect(pnModURL('Weblinks', 'admin', 'catview'));
}

/**
 * function linkview
 */
function Weblinks_admin_linkview() // ready
{
    // Security check
    if (!SecurityUtil::checkPermission('Weblinks::Link', "::", ACCESS_EDIT)) {
        return LogUtil::registerPermissionError();
    }

    // create output object
    $render = pnRender::getInstance('Weblinks', false);

    // assign various useful template variables
    $render->assign('authid', SecurityUtil::generateAuthKey('Weblinks'));
    $render->assign('catnum', pnModAPIFunc('Weblinks', 'user', 'catnum'));
    $render->assign('numrows', pnModAPIFunc('Weblinks', 'user', 'numrows'));
    $render->assign('submitter', pnUserGetVar('uname'));
    $render->assign('submitteremail', pnUserGetVar('email'));

    // Return the output that has been generated by this function
    return $render->fetch('weblinks_admin_linkview.html');
}

/**
 * function addlink
 */
function Weblinks_admin_addlink() // ready
{
    $dom = ZLanguage::getModuleDomain('Weblinks');

    // get parameters we need
    $link = FormUtil::getPassedValue('link', array(), 'POST');
    $sitename = pnConfigGetVar('sitename');
    $adminmail = pnConfigGetVar('adminmail');

    // Security check
    if (!SecurityUtil::checkPermission('Weblinks::Link', "::", ACCESS_ADD)) {
        return LogUtil::registerPermissionError();
    }

    // Confirm authorisation code.
    if (!SecurityUtil::confirmAuthKey()) {
        return LogUtil::registerAuthidError();
    }

    if (pnModGetVar('Weblinks', 'doubleurl') == 0) {
        // check if URL exist
        $checkurl = pnModAPIFunc('Weblinks', 'user', 'checkurl', array('url' => $link['url']));
    } else {
        $checkurl = 0;
    }

    if ($checkurl > 0) {
        LogUtil::registerError(__('Sorry! Please try again: this link is already listed in the database!', $dom));
        return pnRedirect(pnModURL('Weblinks', 'admin', 'linkview'));
    } else {
        /* Check if Title exist */
        if (empty($link['title'])) {
            LogUtil::registerError(__('Sorry! Please try again: you need to specify a TITLE for your link!', $dom));
            return pnRedirect(pnModURL('Weblinks', 'admin', 'linkview'));
        }
        /* Check if URL exist */
        if (empty($link['url'])) {
            LogUtil::registerError(__('Sorry! Please try again: you need to specify a URL for your link!', $dom));
            return pnRedirect(pnModURL('Weblinks', 'admin', 'linkview'));
        }
/*        // Check if Description exist
        if (empty($link['description'])) {
            LogUtil::registerError (__('Sorry! Please try again: you need to include a DESCRIPTION for your link!', $dom));
            return pnRedirect(pnModURL('Weblinks', 'admin', 'linkview'));
        }
*/
        // add link to db
        $addlink = pnModAPIFunc('Weblinks', 'admin', 'addlink', array('cat' => $link['cat'],
                                                                      'title' => $link['title'],
                                                                      'url' => $link['url'],
                                                                      'description' => $link['description'],
                                                                      'date' => DateUtil::getDatetime(),
                                                                      'name' => $link['name'],
                                                                      'email' => $link['email'],
                                                                      'submitter' => $link['submitter']));

        // Statusmessage if true or false
        if ($addlink == true) {
            if ($link['new'] == 1) {
                pnModAPIFunc('Weblinks', 'admin', 'delnewlink', array('lid' => $link['lid']));
                if ($link['email'] == "") {
                } else {
                    // $from = $adminmail; ??
                    $subject = DataUtil::formatForDisplay(__('Your link at', $dom))." ".DataUtil::formatForDisplay($sitename);
                    $message = DataUtil::formatForDisplay(__('Hello', $dom))." ".DataUtil::formatForDisplay($link['name']).",<br /><br />".DataUtil::formatForDisplay(__('your link submission has been approved for the site\'s search engine.', $dom))."<br /><br />".DataUtil::formatForDisplay(__('Link title', $dom))
                    .": ".DataUtil::formatForDisplay($link['title'])."<br />".DataUtil::formatForDisplay(__('URL', $dom)).": ".DataUtil::formatForDisplay($link['url'])."<br />".DataUtil::formatForDisplay(__('Description', $dom)).": ".DataUtil::formatForDisplayHTML($link['description'])."<br /><br /><br />"
                    .DataUtil::formatForDisplay(__('The site\'s search engine is available at:', $dom)). "<br /><a href=\"" .pnGetBaseURL() . "index.php?module=Weblinks\">" .pnGetBaseURL() . "index.php?module=Weblinks</a><br /><br />"
                    .DataUtil::formatForDisplay(__('Thank you for your submission!', $dom))."<br /><br />".DataUtil::formatForDisplay($sitename)." ".DataUtil::formatForDisplay(__('Team.', $dom))."";
                    // send the e-mail
                    pnModAPIFunc('Mailer', 'user', 'sendmessage', array('toaddress' => $link['email'], 'subject' => $subject, 'body' => $message, 'html' => true));
                }

                LogUtil::registerStatus(__('New link added to the database', $dom));
                return pnRedirect(pnModURL('Weblinks', 'admin', 'view'));
            }

            LogUtil::registerStatus(__('New link added to the database', $dom));
            return pnRedirect(pnModURL('Weblinks', 'admin', 'linkview'));
        } else {
            LogUtil::registerError(__('Error! Could not add link to db.', $dom));
            return pnRedirect(pnModURL('Weblinks', 'admin', 'linkview'));
        }
    }
}

/**
 * function modlink
 */
function Weblinks_admin_modlink() // ready
{
    $dom = ZLanguage::getModuleDomain('Weblinks');

    // get parameters we need
    $lid = (int)FormUtil::getPassedValue('lid', null, 'GETPOST');

    // Security check
    if (!SecurityUtil::checkPermission('Weblinks::Link', "::", ACCESS_EDIT)) {
        return LogUtil::registerPermissionError();
    }

    // get linkarray from db
    $link = pnModAPIFunc('Weblinks', 'admin', 'getlink', array('lid' => $lid));

    // check if $link return
    if (!$link) {
        LogUtil::registerError(__('No link found', $dom));
        return  pnRedirect(pnModURL('Weblinks', 'admin', 'linkview'));
    }

    // create output object
    $render = pnRender::getInstance('Weblinks', false);

    // assign various useful template variables
    $render->assign('authid', SecurityUtil::generateAuthKey('Weblinks'));
    $render->assign('link', $link);

    // Return the output that has been generated by this function
    return $render->fetch('weblinks_admin_modlink.html');
}

/**
 * function modlinks
 */
function Weblinks_admin_modlinks() // ready
{
    $dom = ZLanguage::getModuleDomain('Weblinks');

    // get parameters we need
    $link = FormUtil::getPassedValue('link', array(), 'POST');

    // Security check
    if (!SecurityUtil::checkPermission('Weblinks::Link', "::", ACCESS_EDIT)) {
        return LogUtil::registerPermissionError();
    }

    // Confirm authorisation code.
    if (!SecurityUtil::confirmAuthKey()) {
        return LogUtil::registerAuthidError();
    }

    // update the link with new vars
    if (pnModAPIFunc('Weblinks', 'admin', 'updatelink', array('lid' => $link['lid'],
                                                               'cid' => $link['cat'],
                                                               'title' => $link['title'],
                                                               'url' => $link['url'],
                                                               'description' => $link['description'],
                                                               'name' => $link['name'],
                                                               'email' => $link['email'],
                                                               'hits' => $link['hits']))) {
        // Success
        LogUtil::registerStatus(__('Link successfully modified', $dom));
    }

    // redirect to function linkview
    return pnRedirect(pnModURL('Weblinks', 'admin', 'linkview'));
}

/**
 * function dellink
 */
function Weblinks_admin_dellink() // ready
{
    $dom = ZLanguage::getModuleDomain('Weblinks');

    // get parameters we need
    $lid = (int)FormUtil::getPassedValue('lid', null, 'GET');

    // Security check
    if (!SecurityUtil::checkPermission('Weblinks::Link', "::", ACCESS_DELETE)) {
        return LogUtil::registerPermissionError();
    }

    // Confirm authorisation code.
    if (!SecurityUtil::confirmAuthKey()) {
        return LogUtil::registerAuthidError();
    }

    // delete the link
    if (pnModAPIFunc('Weblinks', 'admin', 'dellink', array('lid' => $lid))) {
        // Success
        LogUtil::registerStatus(__('Link removed from the database', $dom));
    }

    // redirect to function linkview
    return pnRedirect(pnModURL('Weblinks', 'admin', 'linkview'));
}

/**
 * function delnewlink
 */
function Weblinks_admin_delnewlink() // ready
{
    $dom = ZLanguage::getModuleDomain('Weblinks');

    // get parameters we need
    $lid = (int)FormUtil::getPassedValue('lid', null, 'GETPOST');

    // Security check
    if (!SecurityUtil::checkPermission('Weblinks::Link', "::", ACCESS_DELETE)) {
        return LogUtil::registerPermissionError();
    }

    // Confirm authorisation code.
    if (!SecurityUtil::confirmAuthKey()) {
        return LogUtil::registerAuthidError();
    }

    // delete new link
    if (pnModAPIFunc('Weblinks', 'admin', 'delnewlink', array('lid' => $lid))) {
        // Success
        LogUtil::registerStatus(__('New link removed from the database', $dom));
    }

    // redirect to function view
    return pnRedirect(pnModURL('Weblinks', 'admin', 'view'));
}

/**
 * function validate
 */
function Weblinks_admin_validate() // ready
{
    // get parameters we need
    $cid = (int)FormUtil::getPassedValue('cid', null, 'POST');

    // Security check
    if (!SecurityUtil::checkPermission('Weblinks::Category', "::", ACCESS_EDIT)) {
        return LogUtil::registerPermissionError();
    }

    // Confirm authorisation code.
    if (!SecurityUtil::confirmAuthKey()) {
        return LogUtil::registerAuthidError();
    }

    // check links
    $links = pnModAPIFunc('Weblinks', 'admin', 'checklinks', array('cid' => $cid));

    // create output object
    $render = pnRender::getInstance('Weblinks', false);

    // assign various useful template variables
    $render->assign('authid', SecurityUtil::generateAuthKey('Weblinks'));
    $render->assign('cid', $cid);
    $render->assign('links', $links);

    // Return the output that has been generated by this function
    return $render->fetch('weblinks_admin_validate.html');
}

/**
 * function listbrokenlinks
 */
function Weblinks_admin_listbrokenlinks() // ready
{
    // Security check
    if (!SecurityUtil::checkPermission('Weblinks::Link', "::", ACCESS_EDIT)) {
        return LogUtil::registerPermissionError();
    }

    // create output object
    $render = pnRender::getInstance('Weblinks', false);

    // assign various useful template variables
    $render->assign('authid', SecurityUtil::generateAuthKey('Weblinks'));
    $render->assign('totalbrokenlinks', pnModAPIFunc('Weblinks', 'admin', 'countbrokenlinks'));
    $render->assign('brokenlinks', pnModAPIFunc('Weblinks', 'admin', 'brokenlinks'));

    // Return the output that has been generated by this function
    return $render->fetch('weblinks_admin_listbrokenlinks.html');
}

/**
 * function delbrokenlinks
 */
function Weblinks_admin_delbrokenlinks() // ready
{
    $dom = ZLanguage::getModuleDomain('Weblinks');

    // get parameters we need
    $rid = (int)FormUtil::getPassedValue('rid', null, 'REQUEST');
    $lid = (int)FormUtil::getPassedValue('lid', null, 'REQUEST');

    // Security check
    if (!SecurityUtil::checkPermission('Weblinks::Link', "::", ACCESS_DELETE)) {
        return LogUtil::registerPermissionError();
    }

    // Confirm authorisation code.
    if (!SecurityUtil::confirmAuthKey()) {
        return LogUtil::registerAuthidError();
    }

    // del request
    pnModAPIFunc('Weblinks', 'admin', 'delrequest', array('rid' => $rid));

    // del link
    if (pnModAPIFunc('Weblinks', 'admin', 'dellink', array('lid' => $lid))) {
        // Success
        LogUtil::registerStatus(__('Link removed from the database', $dom));
    }

    // redirect to function listbrokenlinks
    return pnRedirect(pnModURL('Weblinks', 'admin', 'listbrokenlinks'));
}

/**
 * function ignorebrokenlinks
 */
function Weblinks_admin_ignorebrokenlinks() // ready
{
    $dom = ZLanguage::getModuleDomain('Weblinks');

    // get parameters we need
    $rid = (int)FormUtil::getPassedValue('rid', null, 'REQUEST');

    // Security check
    if (!SecurityUtil::checkPermission('Weblinks::Link', "::", ACCESS_EDIT)) {
        return LogUtil::registerPermissionError();
    }

    // Confirm authorisation code.
    if (!SecurityUtil::confirmAuthKey()) {
        return LogUtil::registerAuthidError();
    }

    // del request
    if (pnModAPIFunc('Weblinks', 'admin', 'delrequest', array('rid' => $rid))) {
        // Success
        LogUtil::registerStatus(__('Ignore requests', $dom));
    }

    // redirect to function listbrokenlinks
    return pnRedirect(pnModURL('Weblinks', 'admin', 'listbrokenlinks'));
}

/**
 * function listmodrequests
 */
function Weblinks_admin_listmodrequests() // ready
{
    // Security check
    if (!SecurityUtil::checkPermission('Weblinks::Link', "::", ACCESS_EDIT)) {
        return LogUtil::registerPermissionError();
    }

    // create output object
    $render = pnRender::getInstance('Weblinks', false);

    // assign various useful template variables
    $render->assign('authid', SecurityUtil::generateAuthKey('Weblinks'));
    $render->assign('totalmodrequests', pnModAPIFunc('Weblinks', 'admin', 'countmodrequests'));
    $render->assign('modrequests', pnModAPIFunc('Weblinks', 'admin', 'modrequests'));

    // Return the output that has been generated by this function
    return $render->fetch('weblinks_admin_listmodrequests.html');
}

/**
 * function changemodrequests
 */
function Weblinks_admin_changemodrequests()
{
    $dom = ZLanguage::getModuleDomain('Weblinks');

    // get parameters we need
    $rid = FormUtil::getPassedValue('rid', null, 'REQUEST');

    // Security check
    if (!SecurityUtil::checkPermission('Weblinks::Link', "::", ACCESS_EDIT)) {
        return LogUtil::registerPermissionError();
    }

    // Confirm authorisation code.
    if (!SecurityUtil::confirmAuthKey()) {
        return LogUtil::registerAuthidError();
    }

    // get vars from request
    $requestlink = pnModAPIFunc('Weblinks', 'admin', 'linkmodrequest', array('rid' => $rid));

    if ($requestlink) {
       // del request
        pnModAPIFunc('Weblinks', 'admin', 'delrequest', array('rid' => $rid));

        // change link
        if (pnModAPIFunc('Weblinks', 'admin', 'updatemodlink', array('lid' => $requestlink['lid'],
                                                                      'cid' => $requestlink['cat_id'],
                                                                      'title' => $requestlink['title'],
                                                                      'url' => $requestlink['url'],
                                                                      'description' => $requestlink['description']))) {

            // Success
            LogUtil::registerStatus(__('Link was changed successfuly', $dom));
        }
    }

    // redirect to function listmodrequests
    return pnRedirect(pnModURL('Weblinks', 'admin', 'listmodrequests'));
}

/**
 * function delmodrequests
 */
function Weblinks_admin_delmodrequests() // ready
{
    $dom = ZLanguage::getModuleDomain('Weblinks');

    // get parameters we need
    $rid = FormUtil::getPassedValue('rid', null, 'REQUEST');

    // Security check
    if (!SecurityUtil::checkPermission('Weblinks::Link', "::", ACCESS_EDIT)) {
        return LogUtil::registerPermissionError();
    }

    // Confirm authorisation code.
    if (!SecurityUtil::confirmAuthKey()) {
        return LogUtil::registerAuthidError();
    }

    // delete request
    if (pnModAPIFunc('Weblinks', 'admin', 'delrequest', array('rid' => $rid))) {
        // Success
        LogUtil::registerStatus(__('User link modification requests was ignored', $dom));
    }

    // redirect to function listmodrequests
    return pnRedirect(pnModURL('Weblinks', 'admin', 'listmodrequests'));
}

/**
 * function getconfig
 */
function Weblinks_admin_getconfig() // ready
{
    // Security check
    if (!SecurityUtil::checkPermission('Weblinks::', "::", ACCESS_ADMIN)) {
        return LogUtil::registerPermissionError();
    }

    // create output object
    $render = pnRender::getInstance('Weblinks', false);

    // assign various useful template variables
    $render->assign('authid', SecurityUtil::generateAuthKey('Weblinks'));
    $render->assign('config', pnModGetVar('Weblinks'));

    // Return the output that has been generated by this function
    return $render->fetch('weblinks_admin_getconfig.html');
}

/**
 * function updateconfig
 */
function Weblinks_admin_updateconfig() // ready
{
    $dom = ZLanguage::getModuleDomain('Weblinks');

    // get our input
    $config = FormUtil::getPassedValue('config', 'array()', 'POST');

    // Security check
    if (!SecurityUtil::checkPermission('Weblinks::', "::", ACCESS_ADMIN)) {
        return LogUtil::registerPermissionError();
    }

    // Confirm authorisation code.
    if (!SecurityUtil::confirmAuthKey()) {
        return LogUtil::registerAuthidError();
    }

    // Update module variables
    if ( !isset($config['perpage']) || !is_numeric($config['perpage']) ) {
        $config['perpage'] = 10;
    }
    pnModSetVar('Weblinks', 'perpage', $config['perpage']);

    if ( !isset($config['newlinks']) || !is_numeric($config['newlinks']) ) {
        $config['newlinks'] = 10;
    }
    pnModSetVar('Weblinks', 'newlinks', $config['newlinks']);

    if ( !isset($config['bestlinks']) || !is_numeric($config['bestlinks']) ) {
        $config['bestlinks'] = 10;
    }
    pnModSetVar('Weblinks', 'bestlinks', $config['bestlinks']);

    if ( !isset($config['linksresults']) || !is_numeric($config['linksresults']) ) {
        $config['linksresults'] = 10;
    }
    pnModSetVar('Weblinks', 'linksresults', $config['linksresults']);

    if ( !isset($config['linksinblock']) || !is_numeric($config['linksinblock']) ) {
        $config['linksinblock'] = 10;
    }
    pnModSetVar('Weblinks', 'linksinblock', $config['linksinblock']);

    if ( !isset($config['popular']) || !is_numeric($config['popular']) ) {
        $config['popular'] = 500;
    }
    pnModSetVar('Weblinks', 'popular', $config['popular']);

    if ( !isset($config['mostpoplinkspercentrigger']) || !is_numeric($config['mostpoplinkspercentrigger']) ) {
        $config['mostpoplinkspercentrigger'] = 0;
    }
    pnModSetVar('Weblinks', 'mostpoplinkspercentrigger', $config['mostpoplinkspercentrigger']);

    if ( !isset($config['mostpoplinks']) || !is_numeric($config['mostpoplinks']) ) {
        $config['mostpoplinks'] = 25;
    }
    pnModSetVar('Weblinks', 'mostpoplinks', $config['mostpoplinks']);

    if ( !isset($config['featurebox']) || !is_numeric($config['featurebox']) ) {
        $config['featurebox'] = 1;
    }
    pnModSetVar('Weblinks', 'featurebox', $config['featurebox']);

    if ( !isset($config['targetblank']) || !is_numeric($config['targetblank']) ) {
        $config['targetblank'] = 0;
    }
    pnModSetVar('Weblinks', 'targetblank', $config['targetblank']);

    if ( !isset($config['doubleurl']) || !is_numeric($config['doubleurl']) ) {
        $config['doubleurl'] = 0;
    }
    pnModSetVar('Weblinks', 'doubleurl', $config['doubleurl']);

    if ( !isset($config['unregbroken']) || !is_numeric($config['unregbroken']) ) {
        $config['unregbroken'] = 0;
    }
    pnModSetVar('Weblinks', 'unregbroken', $config['unregbroken']);

    if ( !isset($config['blockunregmodify']) || !is_numeric($config['blockunregmodify']) ) {
        $config['blockunregmodify'] = 0;
    }
    pnModSetVar('Weblinks', 'blockunregmodify', $config['blockunregmodify']);

    if ( !isset($config['links_anonaddlinklock']) || !is_numeric($config['links_anonaddlinklock']) ) {
        $config['links_anonaddlinklock'] = 0;
    }
    pnModSetVar('Weblinks', 'links_anonaddlinklock', $config['links_anonaddlinklock']);

    if ( !isset($config['websnapr']) || !is_numeric($config['websnapr']) ) {
        $config['websnapr'] = 0;
    }
    pnModSetVar('Weblinks', 'websnapr', $config['websnapr']);

    if ( !isset($config['websnaprkey'])) {
        $config['websnaprkey'] = '';
    }
    pnModSetVar('Weblinks', 'websnaprkey', $config['websnaprkey']);

    if ( !isset($config['websnaprsize'])) {
        $config['websnaprsiz'] = 'S';
    }
    pnModSetVar('Weblinks', 'websnaprsize', $config['websnaprsize']);

    // the module configuration has been updated successfuly
    LogUtil::registerStatus(__('Configuration updated', $dom));

    // redirect to function getconfig
    return pnRedirect(pnModURL('Weblinks', 'admin', 'getconfig'));
}

/**
 * function import
 */
function Weblinks_admin_help() // ready
{
    // Security check
    if (!SecurityUtil::checkPermission('Weblinks::', "::", ACCESS_EDIT)) {
        return LogUtil::registerPermissionError();
    }

    // create output object
    $render = pnRender::getInstance('Weblinks', false);

    // Return the output that has been generated by this function
    return $render->fetch('weblinks_admin_help.html');
}

/**
 * function import
 */
function Weblinks_admin_import() // ready
{
    // Security check
    if (!SecurityUtil::checkPermission('Weblinks::', "::", ACCESS_ADMIN)) {
        return LogUtil::registerPermissionError();
    }

    // create output object
    $render = pnRender::getInstance('Weblinks', false);

    // assign various useful template variables
    $render->assign('authid', SecurityUtil::generateAuthKey('Weblinks'));

    if (pnModAvailable('EZComments') && pnModIsHooked('EZComments', 'Weblinks')) {
        $render->assign('ezcomments', 1);
    } else {
        $render->assign('ezcomments', 0);
    }

    if (pnModAvailable('Ratings') && pnModIsHooked('Ratings', 'Weblinks')) {
        $render->assign('ratings', 1);
    } else {
        $render->assign('ratings', 0);
    }

    if (pnModAvailable('CmodsWebLinks')) {
        $render->assign('cmodsweblinks', 1);
    } else {
        $render->assign('cmodsweblinks', 0);
    }

    // Return the output that has been generated by this function
    return $render->fetch('weblinks_admin_import.html');
}

/**
 * function importratings
 */
function Weblinks_admin_importratings() // ready
{
    $dom = ZLanguage::getModuleDomain('Weblinks');

    // Security check
    if (!SecurityUtil::checkPermission('Weblinks::', "::", ACCESS_ADMIN)) {
        return LogUtil::registerPermissionError();
    }

    // Confirm authorisation code.
    if (!SecurityUtil::confirmAuthKey()) {
        return LogUtil::registerAuthidError();
    }

    // Security check
    if (!pnSecAuthAction(0, 'Ratings::', "::", ACCESS_ADMIN)) {
        return LogUtil::registerError(__('Weblinks migration: Not Admin', $dom));
    }

    if (!pnModAvailable('Ratings')) {
          return LogUtil::RegisterError(__('Ratings not available', $dom));
    }

    pnModDBInfoLoad('Ratings');
    $pntable = pnDBGetTables();
    $linkscolumn = $pntable['links_links_column'];
    $where = "WHERE $linkscolumn[totalvotes] != '0'";
    $votes = DBUtil::selectObjectArray('links_links', $where);
    $counter = 0;
    $ratingtype = pnModGetVar('Ratings', 'defaultstyle');
    foreach ($votes as $v) {
        $obj = array ('module'     =>  'Weblinks',
                      'itemid'     =>  $v['lid'],
                      'ratingtype' =>  $ratingtype,
                      'rating'     =>  ceil($v['linkratingsummary']*10),
                      'numratings' =>  $v['totalvotes']);

        if (!DBUtil::insertObject($obj, 'ratings')) return LogUtil::registerError(__('Error inserting votes in ratings table.', $dom));
        $counter++;
    }
    LogUtil::registerStatus(__f('migrated: %s votes from Weblinks to Ratings', $counter, $dom));

    // redirect to function view
    return pnRedirect(pnModURL('Weblinks', 'admin', 'import'));
}

/**
 * function importezcomments
 */
function Weblinks_admin_importezcomments() // ready
{
    $dom = ZLanguage::getModuleDomain('Weblinks');

    // Security check
    if (!SecurityUtil::checkPermission('Weblinks::', "::", ACCESS_ADMIN)) {
        return LogUtil::registerPermissionError();
    }

    // Confirm authorisation code.
    if (!SecurityUtil::confirmAuthKey()) {
        return LogUtil::registerAuthidError();
    }

    // Security check
    if (!pnSecAuthAction(0, 'EZComments::', "::", ACCESS_ADMIN)) {
        return LogUtil::registerError(__('Weblinks migration: Not Admin', $dom));
    }

    if (!pnModAvailable('EZComments')) {
          return LogUtil::RegisterError(__('EZComments not available', $dom));
    }

    pnModDBInfoLoad('EZComments');
    $pntable = pnDBGetTables();
    $linkscolumn = $pntable['links_votedata_column'];
    $where = "WHERE $linkscolumn[ratingcomments] != ''";
    $comments = DBUtil::selectObjectArray('links_votedata', $where);
    $counter = 0;

    foreach ($comments as $c) {
        $linkscolumn = $pntable['links_links_column'];
        $where = "WHERE $linkscolumn[lid] = ".$c['ratinglid'];
        $user = DBUtil::selectObject('links_links', $where);
        if ($c['ratinguser'] == "Anonymous") {
            $c['ratinguser'] = __('anonymous user', $dom);
        }
        $obj = array ('modname'    =>    'Weblinks',
                      'objectid'   =>    $c['ratinglid'],
                      'url'        =>    pnGetBaseURL().'index.php?module=Weblinks&func=viewlinkdetails&lid='.$c['ratinglid'],
                      'date'       =>    $c['ratingtimestamp'],
                      'uid'        =>    pnUserGetIDFromName($c['ratinguser']),
                      'owneruid'   =>    pnUserGetIDFromName($user['submitter']),
                      'comment'    =>    $c['ratingcomments'],
                      'subject'    =>    '',
                      'replyto'    =>    -1,
                      'ipaddr'     =>    $c['ratinghostname']);
        if (!DBUtil::insertObject($obj, 'EZComments')) return LogUtil::registerError(__('Error inserting comments in ezcomments table.', $dom));
        $counter++;
    }
    LogUtil::registerStatus(__f('migrated: %s comments from Weblinks to EZComments', $counter, $dom));

    // redirect to function view
    return pnRedirect(pnModURL('Weblinks', 'admin', 'import'));
}

/**
 * function importcmodsweblinks
 */
function Weblinks_admin_importcmodsweblinks() // ready
{
    $dom = ZLanguage::getModuleDomain('Weblinks');

    // Security check
    if (!SecurityUtil::checkPermission('Weblinks::', "::", ACCESS_ADMIN)) {
        return LogUtil::registerPermissionError();
    }

    // Confirm authorisation code.
    if (!SecurityUtil::confirmAuthKey()) {
        return LogUtil::registerAuthidError();
    }

    pnModDBInfoLoad('CmodsWebLinks');
    $pntable = pnDBGetTables();

    // import categories
    $table = $pntable['cmodsweblinks_categories'];
    $sql = "SELECT * FROM $table";
    $categories = DBUtil::selectObjectArraySQL($sql, 'cmodsweblinks_categories');
//     $categories = DBUtil::selectObjectArray('cmodsweblinks_categories', '', 'cat_id', '-1', '-1');
    $counter = 0;
    foreach ($categories as $category) {
        $obj = array ('parent_id'    => $category['parent_id'],
                      'title'        => $category['title'],
                      'cdescription' => $category['cdescription']);
        if (!DBUtil::insertObject($obj, 'links_categories', 'cat_id')) return LogUtil::registerError(__('Error inserting CmodsWebLinks categories in Weblinks categories table.', $dom));
        // get cat_id from the new category
        $remembercat[$category['cat_id']] = DBUtil::getInsertID('links_categories', 'cat_id');
        $counter++;
    }
    LogUtil::registerStatus(__f('migrated: %s categories from CmodsWebLinks to Weblinks', $counter, $dom));

    // import links
    $table = $pntable['cmodsweblinks_links'];
    $sql = "SELECT * FROM $table";
    $links = DBUtil::selectObjectArraySQL($sql, 'cmodsweblinks_links');
//    $links = DBUtil::selectObjectArray('cmodsweblinks_links', '', 'lid', '-1', '-1');
    $counter = 0;
    foreach ($links as $link) {
        $obj = array ('cat_id'            => $remembercat[$link['cat_id']],
                      'title'             => $link['title'],
                      'url'               => $link['url'],
                      'description'       => $link['description'],
                      'date'              => $link['date'],
                      'name'              => $link['name'],
                      'email'             => $link['email'],
                      'hits'              => $link['hits'],
                      'submitter'         => $link['submitter'],
                      'linkratingsummary' => $link['linkratingsummary'],
                      'totalvotes'        => $link['totalvotes'],
                      'totalcomments'     => $link['totalcomments']);
        if (!DBUtil::insertObject($obj, 'links_links', 'lid')) return LogUtil::registerError(__('Error inserting CmodsWebLinks links in Weblinks links table.', $dom));
        // get lid from the new link
        $rememberlink[$link['lid']] = DBUtil::getInsertID('links_links', 'lid');
        $counter++;
    }
    LogUtil::registerStatus(__f('migrated: %s links from CmodsWebLinks to Weblinks', $counter, $dom));

    // import modrequests
    $table = &$pntable['cmodsweblinks_modrequest'];
    $sql = "SELECT * FROM $table";
    $modrequests = DBUtil::selectObjectArraySQL($sql, 'cmodsweblinks_modrequest');
//    $modrequests = DBUtil::selectObjectArray('cmodsweblinks_modrequest', '', 'requestid', '-1', '-1');
    $counter = 0;
    foreach ($modrequests as $modrequest) {
        $obj = array ('lid'             => $rememberlink[$link['lid']],
                      'cat_id'          => $remembercat[$modrequest['cat_id']],
                      'sid'             => $modrequest['sid'],
                      'title'           => $modrequest['title'],
                      'url'             => $modrequest['url'],
                      'description'     => $modrequest['description'],
                      'modifysubmitter' => $modrequest['modifysubmitter'],
                      'brokenlink'      => $modrequest['brokenlink']);
        if (!DBUtil::insertObject($obj, 'links_modrequest', 'requestid')) return LogUtil::registerError(__('Error inserting CmodsWebLinks modrequests in Weblinks modrequests table.', $dom));
        $counter++;
    }
    LogUtil::registerStatus(__f('migrated: %s modrequests from CmodsWebLinks to Weblinks', $counter, $dom));

    // import newlinks
    $table = $pntable['cmodsweblinks_newlink'];
    $sql = "SELECT * FROM $table";
    $newlinks = DBUtil::selectObjectArraySQL($sql, 'cmodsweblinks_newlink');
//    $newlinks = DBUtil::selectObjectArray('cmodsweblinks_newlink', '', 'lid', '-1', '-1');
    $counter = 0;
    foreach ($newlinks as $newlink) {
        $obj = array ('cat_id'      => $remembercat[$newlink['cat_id']],
                      'title'       => $newlink['title'],
                      'url'         => $newlink['url'],
                      'description' => $newlink['description'],
                      'name'        => $newlink['name'],
                      'email'       => $newlink['email'],
                      'submitter'   => $newlink['submitter']);
        if (!DBUtil::insertObject($obj, 'links_newlink', 'lid')) return LogUtil::registerError(__('Error inserting CmodsWebLinks newlinks in Weblinks newlinks table.', $dom));
        $counter++;
    }
    LogUtil::registerStatus(__f('migrated: %s newlinks from CmodsWebLinks to Weblinks', $counter, $dom));

    // redirect to function view
    return pnRedirect(pnModURL('Weblinks', 'admin', 'import'));
}